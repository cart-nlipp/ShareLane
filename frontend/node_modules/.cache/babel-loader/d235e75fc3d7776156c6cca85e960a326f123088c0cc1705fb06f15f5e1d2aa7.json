{"ast":null,"code":"var _jsxFileName = \"/Users/piyush/Projects/ShareLane/frontend/src/context/SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      // Only create socket if one doesn't exist\n      if (!socket) {\n        // Initialize socket connection\n        const newSocket = io(process.env.REACT_APP_API_URL || 'http://localhost:5001', {\n          auth: {\n            token: localStorage.getItem('token')\n          }\n        });\n\n        // Connection event handlers\n        newSocket.on('connect', () => {\n          console.log('Socket connected:', newSocket.id);\n          setIsConnected(true);\n\n          // Join user to their personal room\n          newSocket.emit('join', user.id);\n        });\n        newSocket.on('disconnect', () => {\n          console.log('Socket disconnected');\n          setIsConnected(false);\n        });\n        newSocket.on('connect_error', error => {\n          console.error('Socket connection error:', error);\n          setIsConnected(false);\n        });\n        setSocket(newSocket);\n      }\n    } else {\n      // Disconnect socket if user is not authenticated\n      if (socket) {\n        socket.close();\n        setSocket(null);\n        setIsConnected(false);\n      }\n    }\n  }, [isAuthenticated, user === null || user === void 0 ? void 0 : user.id]); // Only depend on user.id, not the entire user object\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, []);\n\n  // Socket event handlers\n  const onBookingCreated = callback => {\n    if (socket) {\n      socket.on('booking_created', callback);\n    }\n  };\n  const onBookingConfirmed = callback => {\n    if (socket) {\n      socket.on('booking_confirmed', callback);\n    }\n  };\n  const onBookingCancelled = callback => {\n    if (socket) {\n      socket.on('booking_cancelled', callback);\n    }\n  };\n  const onPaymentSuccess = callback => {\n    if (socket) {\n      socket.on('payment_success', callback);\n    }\n  };\n  const onPaymentReceived = callback => {\n    if (socket) {\n      socket.on('payment_received', callback);\n    }\n  };\n  const onRideUpdated = callback => {\n    if (socket) {\n      socket.on('ride_updated', callback);\n    }\n  };\n  const onReviewCreated = callback => {\n    if (socket) {\n      socket.on('review_created', callback);\n    }\n  };\n\n  // Emit functions\n  const emitBookingCreated = data => {\n    if (socket) {\n      socket.emit('booking_created', data);\n    }\n  };\n  const emitBookingConfirmed = data => {\n    if (socket) {\n      socket.emit('booking_confirmed', data);\n    }\n  };\n  const emitBookingCancelled = data => {\n    if (socket) {\n      socket.emit('booking_cancelled', data);\n    }\n  };\n  const emitPaymentSuccess = data => {\n    if (socket) {\n      socket.emit('payment_success', data);\n    }\n  };\n  const emitRideUpdated = data => {\n    if (socket) {\n      socket.emit('ride_updated', data);\n    }\n  };\n  const emitReviewCreated = data => {\n    if (socket) {\n      socket.emit('review_created', data);\n    }\n  };\n\n  // Remove event listeners\n  const removeAllListeners = () => {\n    if (socket) {\n      socket.removeAllListeners();\n    }\n  };\n  const value = {\n    socket,\n    isConnected,\n    onBookingCreated,\n    onBookingConfirmed,\n    onBookingCancelled,\n    onPaymentSuccess,\n    onPaymentReceived,\n    onRideUpdated,\n    onReviewCreated,\n    emitBookingCreated,\n    emitBookingConfirmed,\n    emitBookingCancelled,\n    emitPaymentSuccess,\n    emitRideUpdated,\n    emitReviewCreated,\n    removeAllListeners\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(SocketProvider, \"193rC6NWPs61dkSTOKPetQ/KTiA=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default SocketContext;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","useAuth","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","socket","setSocket","isConnected","setIsConnected","user","isAuthenticated","newSocket","process","env","REACT_APP_API_URL","auth","token","localStorage","getItem","on","console","log","id","emit","error","close","onBookingCreated","callback","onBookingConfirmed","onBookingCancelled","onPaymentSuccess","onPaymentReceived","onRideUpdated","onReviewCreated","emitBookingCreated","data","emitBookingConfirmed","emitBookingCancelled","emitPaymentSuccess","emitRideUpdated","emitReviewCreated","removeAllListeners","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["/Users/piyush/Projects/ShareLane/frontend/src/context/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { useAuth } from './AuthContext';\n\nconst SocketContext = createContext();\n\nexport const SocketProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const { user, isAuthenticated } = useAuth();\n\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      // Only create socket if one doesn't exist\n      if (!socket) {\n        // Initialize socket connection\n        const newSocket = io(process.env.REACT_APP_API_URL || 'http://localhost:5001', {\n          auth: {\n            token: localStorage.getItem('token')\n          }\n        });\n\n        // Connection event handlers\n        newSocket.on('connect', () => {\n          console.log('Socket connected:', newSocket.id);\n          setIsConnected(true);\n          \n          // Join user to their personal room\n          newSocket.emit('join', user.id);\n        });\n\n        newSocket.on('disconnect', () => {\n          console.log('Socket disconnected');\n          setIsConnected(false);\n        });\n\n        newSocket.on('connect_error', (error) => {\n          console.error('Socket connection error:', error);\n          setIsConnected(false);\n        });\n\n        setSocket(newSocket);\n      }\n    } else {\n      // Disconnect socket if user is not authenticated\n      if (socket) {\n        socket.close();\n        setSocket(null);\n        setIsConnected(false);\n      }\n    }\n  }, [isAuthenticated, user?.id]); // Only depend on user.id, not the entire user object\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, []);\n\n  // Socket event handlers\n  const onBookingCreated = (callback) => {\n    if (socket) {\n      socket.on('booking_created', callback);\n    }\n  };\n\n  const onBookingConfirmed = (callback) => {\n    if (socket) {\n      socket.on('booking_confirmed', callback);\n    }\n  };\n\n  const onBookingCancelled = (callback) => {\n    if (socket) {\n      socket.on('booking_cancelled', callback);\n    }\n  };\n\n  const onPaymentSuccess = (callback) => {\n    if (socket) {\n      socket.on('payment_success', callback);\n    }\n  };\n\n  const onPaymentReceived = (callback) => {\n    if (socket) {\n      socket.on('payment_received', callback);\n    }\n  };\n\n  const onRideUpdated = (callback) => {\n    if (socket) {\n      socket.on('ride_updated', callback);\n    }\n  };\n\n  const onReviewCreated = (callback) => {\n    if (socket) {\n      socket.on('review_created', callback);\n    }\n  };\n\n  // Emit functions\n  const emitBookingCreated = (data) => {\n    if (socket) {\n      socket.emit('booking_created', data);\n    }\n  };\n\n  const emitBookingConfirmed = (data) => {\n    if (socket) {\n      socket.emit('booking_confirmed', data);\n    }\n  };\n\n  const emitBookingCancelled = (data) => {\n    if (socket) {\n      socket.emit('booking_cancelled', data);\n    }\n  };\n\n  const emitPaymentSuccess = (data) => {\n    if (socket) {\n      socket.emit('payment_success', data);\n    }\n  };\n\n  const emitRideUpdated = (data) => {\n    if (socket) {\n      socket.emit('ride_updated', data);\n    }\n  };\n\n  const emitReviewCreated = (data) => {\n    if (socket) {\n      socket.emit('review_created', data);\n    }\n  };\n\n  // Remove event listeners\n  const removeAllListeners = () => {\n    if (socket) {\n      socket.removeAllListeners();\n    }\n  };\n\n  const value = {\n    socket,\n    isConnected,\n    onBookingCreated,\n    onBookingConfirmed,\n    onBookingCancelled,\n    onPaymentSuccess,\n    onPaymentReceived,\n    onRideUpdated,\n    onReviewCreated,\n    emitBookingCreated,\n    emitBookingConfirmed,\n    emitBookingCancelled,\n    emitPaymentSuccess,\n    emitRideUpdated,\n    emitReviewCreated,\n    removeAllListeners\n  };\n\n  return (\n    <SocketContext.Provider value={value}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n\nexport default SocketContext;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,SAASC,EAAE,QAAQ,kBAAkB;AACrC,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,aAAa,gBAAGR,aAAa,CAAC,CAAC;AAErC,OAAO,MAAMS,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM;IAAEa,IAAI;IAAEC;EAAgB,CAAC,GAAGZ,OAAO,CAAC,CAAC;EAE3CH,SAAS,CAAC,MAAM;IACd,IAAIe,eAAe,IAAID,IAAI,EAAE;MAC3B;MACA,IAAI,CAACJ,MAAM,EAAE;QACX;QACA,MAAMM,SAAS,GAAGd,EAAE,CAACe,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB,EAAE;UAC7EC,IAAI,EAAE;YACJC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO;UACrC;QACF,CAAC,CAAC;;QAEF;QACAP,SAAS,CAACQ,EAAE,CAAC,SAAS,EAAE,MAAM;UAC5BC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEV,SAAS,CAACW,EAAE,CAAC;UAC9Cd,cAAc,CAAC,IAAI,CAAC;;UAEpB;UACAG,SAAS,CAACY,IAAI,CAAC,MAAM,EAAEd,IAAI,CAACa,EAAE,CAAC;QACjC,CAAC,CAAC;QAEFX,SAAS,CAACQ,EAAE,CAAC,YAAY,EAAE,MAAM;UAC/BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;UAClCb,cAAc,CAAC,KAAK,CAAC;QACvB,CAAC,CAAC;QAEFG,SAAS,CAACQ,EAAE,CAAC,eAAe,EAAGK,KAAK,IAAK;UACvCJ,OAAO,CAACI,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;UAChDhB,cAAc,CAAC,KAAK,CAAC;QACvB,CAAC,CAAC;QAEFF,SAAS,CAACK,SAAS,CAAC;MACtB;IACF,CAAC,MAAM;MACL;MACA,IAAIN,MAAM,EAAE;QACVA,MAAM,CAACoB,KAAK,CAAC,CAAC;QACdnB,SAAS,CAAC,IAAI,CAAC;QACfE,cAAc,CAAC,KAAK,CAAC;MACvB;IACF;EACF,CAAC,EAAE,CAACE,eAAe,EAAED,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEa,EAAE,CAAC,CAAC,CAAC,CAAC;;EAEjC;EACA3B,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIU,MAAM,EAAE;QACVA,MAAM,CAACoB,KAAK,CAAC,CAAC;MAChB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,gBAAgB,GAAIC,QAAQ,IAAK;IACrC,IAAItB,MAAM,EAAE;MACVA,MAAM,CAACc,EAAE,CAAC,iBAAiB,EAAEQ,QAAQ,CAAC;IACxC;EACF,CAAC;EAED,MAAMC,kBAAkB,GAAID,QAAQ,IAAK;IACvC,IAAItB,MAAM,EAAE;MACVA,MAAM,CAACc,EAAE,CAAC,mBAAmB,EAAEQ,QAAQ,CAAC;IAC1C;EACF,CAAC;EAED,MAAME,kBAAkB,GAAIF,QAAQ,IAAK;IACvC,IAAItB,MAAM,EAAE;MACVA,MAAM,CAACc,EAAE,CAAC,mBAAmB,EAAEQ,QAAQ,CAAC;IAC1C;EACF,CAAC;EAED,MAAMG,gBAAgB,GAAIH,QAAQ,IAAK;IACrC,IAAItB,MAAM,EAAE;MACVA,MAAM,CAACc,EAAE,CAAC,iBAAiB,EAAEQ,QAAQ,CAAC;IACxC;EACF,CAAC;EAED,MAAMI,iBAAiB,GAAIJ,QAAQ,IAAK;IACtC,IAAItB,MAAM,EAAE;MACVA,MAAM,CAACc,EAAE,CAAC,kBAAkB,EAAEQ,QAAQ,CAAC;IACzC;EACF,CAAC;EAED,MAAMK,aAAa,GAAIL,QAAQ,IAAK;IAClC,IAAItB,MAAM,EAAE;MACVA,MAAM,CAACc,EAAE,CAAC,cAAc,EAAEQ,QAAQ,CAAC;IACrC;EACF,CAAC;EAED,MAAMM,eAAe,GAAIN,QAAQ,IAAK;IACpC,IAAItB,MAAM,EAAE;MACVA,MAAM,CAACc,EAAE,CAAC,gBAAgB,EAAEQ,QAAQ,CAAC;IACvC;EACF,CAAC;;EAED;EACA,MAAMO,kBAAkB,GAAIC,IAAI,IAAK;IACnC,IAAI9B,MAAM,EAAE;MACVA,MAAM,CAACkB,IAAI,CAAC,iBAAiB,EAAEY,IAAI,CAAC;IACtC;EACF,CAAC;EAED,MAAMC,oBAAoB,GAAID,IAAI,IAAK;IACrC,IAAI9B,MAAM,EAAE;MACVA,MAAM,CAACkB,IAAI,CAAC,mBAAmB,EAAEY,IAAI,CAAC;IACxC;EACF,CAAC;EAED,MAAME,oBAAoB,GAAIF,IAAI,IAAK;IACrC,IAAI9B,MAAM,EAAE;MACVA,MAAM,CAACkB,IAAI,CAAC,mBAAmB,EAAEY,IAAI,CAAC;IACxC;EACF,CAAC;EAED,MAAMG,kBAAkB,GAAIH,IAAI,IAAK;IACnC,IAAI9B,MAAM,EAAE;MACVA,MAAM,CAACkB,IAAI,CAAC,iBAAiB,EAAEY,IAAI,CAAC;IACtC;EACF,CAAC;EAED,MAAMI,eAAe,GAAIJ,IAAI,IAAK;IAChC,IAAI9B,MAAM,EAAE;MACVA,MAAM,CAACkB,IAAI,CAAC,cAAc,EAAEY,IAAI,CAAC;IACnC;EACF,CAAC;EAED,MAAMK,iBAAiB,GAAIL,IAAI,IAAK;IAClC,IAAI9B,MAAM,EAAE;MACVA,MAAM,CAACkB,IAAI,CAAC,gBAAgB,EAAEY,IAAI,CAAC;IACrC;EACF,CAAC;;EAED;EACA,MAAMM,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAIpC,MAAM,EAAE;MACVA,MAAM,CAACoC,kBAAkB,CAAC,CAAC;IAC7B;EACF,CAAC;EAED,MAAMC,KAAK,GAAG;IACZrC,MAAM;IACNE,WAAW;IACXmB,gBAAgB;IAChBE,kBAAkB;IAClBC,kBAAkB;IAClBC,gBAAgB;IAChBC,iBAAiB;IACjBC,aAAa;IACbC,eAAe;IACfC,kBAAkB;IAClBE,oBAAoB;IACpBC,oBAAoB;IACpBC,kBAAkB;IAClBC,eAAe;IACfC,iBAAiB;IACjBC;EACF,CAAC;EAED,oBACEzC,OAAA,CAACC,aAAa,CAAC0C,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAvC,QAAA,EAClCA;EAAQ;IAAAyC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAAC3C,EAAA,CAvKWF,cAAc;EAAA,QAGSJ,OAAO;AAAA;AAAAkD,EAAA,GAH9B9C,cAAc;AAyK3B,OAAO,MAAM+C,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC7B,MAAMC,OAAO,GAAGzD,UAAU,CAACO,aAAa,CAAC;EACzC,IAAI,CAACkD,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,SAAS;AAQtB,eAAehD,aAAa;AAAC,IAAA+C,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}