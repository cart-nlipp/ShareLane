{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5001/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: profileData => api.put('/auth/profile', profileData)\n};\n\n// Rides API\nexport const ridesAPI = {\n  getRides: params => api.get('/rides', {\n    params\n  }),\n  getRideById: id => api.get(`/rides/${id}`),\n  createRide: rideData => api.post('/rides', rideData),\n  updateRide: (id, rideData) => api.put(`/rides/${id}`, rideData),\n  deleteRide: id => api.delete(`/rides/${id}`),\n  getMyRides: params => api.get('/rides/my-rides', {\n    params\n  })\n};\n\n// Bookings API\nexport const bookingsAPI = {\n  createBooking: bookingData => api.post('/bookings', bookingData),\n  getMyBookings: params => api.get('/bookings', {\n    params\n  }),\n  getRideBookings: (rideId, params) => api.get(`/bookings/ride/${rideId}`, {\n    params\n  }),\n  updateBookingStatus: (id, status) => api.put(`/bookings/${id}/status`, {\n    status\n  }),\n  cancelBooking: (id, reason) => api.put(`/bookings/${id}/cancel`, {\n    cancellationReason: reason\n  })\n};\n\n// Payments API\nexport const paymentsAPI = {\n  createPaymentIntent: bookingId => api.post('/payments/create-intent', {\n    bookingId\n  }),\n  confirmPayment: paymentIntentId => api.post('/payments/confirm', {\n    paymentIntentId\n  }),\n  processRefund: (bookingId, reason) => api.post('/payments/refund', {\n    bookingId,\n    reason\n  }),\n  getPaymentHistory: params => api.get('/payments/history', {\n    params\n  })\n};\n\n// Reviews API\nexport const reviewsAPI = {\n  createReview: reviewData => api.post('/reviews', reviewData),\n  getUserReviews: (userId, params) => api.get(`/reviews/user/${userId}`, {\n    params\n  }),\n  getRideReviews: (rideId, params) => api.get(`/reviews/ride/${rideId}`, {\n    params\n  }),\n  getGivenReviews: params => api.get('/reviews/given', {\n    params\n  })\n};\n\n// Notifications API\nexport const notificationsAPI = {\n  getNotifications: params => api.get('/notifications', {\n    params\n  }),\n  getNotificationCount: () => api.get('/notifications/count'),\n  markAsRead: id => api.put(`/notifications/${id}/read`),\n  markAllAsRead: () => api.post('/notifications/mark-all-read'),\n  deleteNotification: id => api.delete(`/notifications/${id}`)\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","post","register","userData","getProfile","get","updateProfile","profileData","put","ridesAPI","getRides","params","getRideById","id","createRide","rideData","updateRide","deleteRide","delete","getMyRides","bookingsAPI","createBooking","bookingData","getMyBookings","getRideBookings","rideId","updateBookingStatus","cancelBooking","reason","cancellationReason","paymentsAPI","createPaymentIntent","bookingId","confirmPayment","paymentIntentId","processRefund","getPaymentHistory","reviewsAPI","createReview","reviewData","getUserReviews","userId","getRideReviews","getGivenReviews","notificationsAPI","getNotifications","getNotificationCount","markAsRead","markAllAsRead","deleteNotification"],"sources":["/Users/piyush/Projects/ShareLane/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5001/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Token expired or invalid\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: (profileData) => api.put('/auth/profile', profileData),\n};\n\n// Rides API\nexport const ridesAPI = {\n  getRides: (params) => api.get('/rides', { params }),\n  getRideById: (id) => api.get(`/rides/${id}`),\n  createRide: (rideData) => api.post('/rides', rideData),\n  updateRide: (id, rideData) => api.put(`/rides/${id}`, rideData),\n  deleteRide: (id) => api.delete(`/rides/${id}`),\n  getMyRides: (params) => api.get('/rides/my-rides', { params }),\n};\n\n// Bookings API\nexport const bookingsAPI = {\n  createBooking: (bookingData) => api.post('/bookings', bookingData),\n  getMyBookings: (params) => api.get('/bookings', { params }),\n  getRideBookings: (rideId, params) => api.get(`/bookings/ride/${rideId}`, { params }),\n  updateBookingStatus: (id, status) => api.put(`/bookings/${id}/status`, { status }),\n  cancelBooking: (id, reason) => api.put(`/bookings/${id}/cancel`, { cancellationReason: reason }),\n};\n\n// Payments API\nexport const paymentsAPI = {\n  createPaymentIntent: (bookingId) => api.post('/payments/create-intent', { bookingId }),\n  confirmPayment: (paymentIntentId) => api.post('/payments/confirm', { paymentIntentId }),\n  processRefund: (bookingId, reason) => api.post('/payments/refund', { bookingId, reason }),\n  getPaymentHistory: (params) => api.get('/payments/history', { params }),\n};\n\n// Reviews API\nexport const reviewsAPI = {\n  createReview: (reviewData) => api.post('/reviews', reviewData),\n  getUserReviews: (userId, params) => api.get(`/reviews/user/${userId}`, { params }),\n  getRideReviews: (rideId, params) => api.get(`/reviews/ride/${rideId}`, { params }),\n  getGivenReviews: (params) => api.get('/reviews/given', { params }),\n};\n\n// Notifications API\nexport const notificationsAPI = {\n  getNotifications: (params) => api.get('/notifications', { params }),\n  getNotificationCount: () => api.get('/notifications/count'),\n  markAsRead: (id) => api.put(`/notifications/${id}/read`),\n  markAllAsRead: () => api.post('/notifications/mark-all-read'),\n  deleteNotification: (id) => api.delete(`/notifications/${id}`),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}